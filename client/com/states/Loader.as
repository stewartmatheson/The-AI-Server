package com.states {		import flash.net.*;	import flash.events.*;	import com.events.StateEvent;	import com.Config;	import com.states.WelcomeScreen;	import com.lib.State;	import flash.display.Stage;	import com.views.StatusComplete;		public class Loader extends State {				private var unitsLoader:URLLoader;		private var mapLoader:URLLoader;		private var statusDisplay:StatusComplete;			public function Loader(s:Stage)		{			super(s);						Config.setValue("server_base_uri", "localhost:3000");			Config.setValue("maps_uri", "/maps.xml");			Config.setValue("units_uri", "/units.xml");						currentStage.addEventListener(Event.ENTER_FRAME, frameEntered);						mapLoader = new URLLoader();			mapLoader.addEventListener(Event.COMPLETE, loadedMaps);			mapLoader.load(new URLRequest("http://" + Config.getValue("server_base_uri") + 																			Config.getValue("maps_uri")));						unitsLoader = new URLLoader();			unitsLoader.addEventListener(Event.COMPLETE, loadedUnits);			unitsLoader.load(new URLRequest("http://" + Config.getValue("server_base_uri") + 																			Config.getValue("units_uri")));						statusDisplay = new StatusComplete();			statusDisplay.x = (currentStage.stageWidth / 2) - (statusDisplay.width / 2 );			statusDisplay.y = (currentStage.stageHeight / 2) - (statusDisplay.height / 2);			addView(statusDisplay);			display();		}				private function frameEntered(e:Event):void		{			statusDisplay.bar.width = loaderCompletePercent();			statusDisplay.percentLabel.text = loaderCompletePercent().toString();						if(loaderCompletePercent() == 100 && Config.getValue("maps") != null && Config.getValue("units") != null)			{				currentStage.removeEventListener(Event.ENTER_FRAME, frameEntered);				var nextStateEvent:StateEvent = new StateEvent(StateEvent.COMPLETE);				var w:WelcomeScreen = new WelcomeScreen(currentStage);				nextStateEvent.setNextState(w);				dispatchEvent(nextStateEvent);			}		}				private function loaderCompletePercent():int		{			var total:Number = currentStage.loaderInfo.bytesTotal + 								mapLoader.bytesTotal +								unitsLoader.bytesTotal;											var loaded:Number = currentStage.loaderInfo.bytesLoaded + 								mapLoader.bytesLoaded + 								unitsLoader.bytesLoaded;						return Math.floor((loaded / total) * 100);		}				private function loadedMaps(e:Event):void		{			var mapsXML:XML = XML(e.target.data);			mapsXML.ignoreWhite = true;			var maps:Array = new Array();			for each (var map:XML in mapsXML.map)			{				var singleMap:Array = new Array();				var mapTiles:Array = new Array();								for each(var tile:XML in map.tiles.tile)				{					var singleTile:Array = new Array();					//trace(tile);					singleTile["type"] = tile["tile-type"].toString();					singleTile["height"] = int(tile["height"]);					singleTile["order"] = int(tile["map-order"]);					mapTiles.push(singleTile);				}								singleMap["name"] = map["name"].toString();				singleMap["height"] = int(map["height"]);				singleMap["width"] = int(map["width"]);				singleMap["tiles"] = mapTiles;								maps.push(singleMap);			}			Config.setValue("maps", maps);		}				private function loadedUnits(e:Event):void		{			var unitsXML:XML = XML(e.target.data);			unitsXML.ignoreWhite = true;			var units:Array = new Array();						for each(var unit:XML in unitsXML.unit)			{				var singleUnit:Array = new Array();				singleUnit["name"] = unit["name"].toString();				singleUnit["attack"] = int(unit["attack"]);				singleUnit["defence"] = int(unit["defence"]);				singleUnit["movement"] = int(unit["movement"]);				units.push(singleUnit);												trace(unit["name"]);			}			Config.setValue("units", units);						trace(unitsXML);		}	}}